#include <ESP8266WiFi.h>
#include <BlynkSimpleEsp8266.h>
#include <OneWire.h>
#include <DallasTemperature.h>

#ifndef UNIT_TEST
#include <Arduino.h>
#endif
#include <IRremoteESP8266.h>
#include <IRsend.h>

#define ONE_WIRE_BUS 2

const uint16_t kIrLed = 4; // ESP8266 GPIO pin to use. Recommended: 4 (D2).
uint8_t sensor1[8] = {0x28, 0xBB, 0x27, 0x79, 0x97, 0x08, 0x03, 0xB5};

IRsend irsend(kIrLed); // Set the GPIO to be used to sending the message.

uint16_t generalOff[197] = {
    6148, 7350, 534, 1660, 580, 1628, 570, 1620, 528, 1682, 570, 1618, 570, 1622, 528, 1680, 566, 1620, 562, 566, 530, 596, 528, 598, 528, 598, 550, 598, 568, 558, 568, 558, 566, 558, 560, 1628, 528, 1680, 570, 1618, 536, 1654, 528, 1682, 570, 1618, 536, 1656, 550, 1660, 570, 558, 566, 560, 566, 558, 534, 592, 530, 596, 528, 598, 550, 598, 554, 570, 566, 1620, 568, 1622, 528, 1682, 570, 1618, 530, 1660, 528, 1682, 560, 1628, 570, 1622, 528, 598, 552, 598, 566, 560, 566, 558, 568, 558, 566, 558, 534, 592, 530, 596, 530, 1662, 588, 1618, 570, 1620, 530, 596, 550, 578, 588, 1618, 570, 1620, 530, 1662, 590, 556, 568, 558, 566, 560, 566, 1622, 526, 1680, 570, 558, 568, 558, 566, 558, 566, 558, 530, 1662, 548, 1658, 570, 556, 568, 1620, 528, 598, 548, 578, 588, 1618, 570, 1618, 530, 598, 526, 622, 556, 1630, 558, 566, 570, 1620, 528, 1680, 570, 558, 568, 558, 568, 1620, 528, 596, 552, 1656, 560, 568, 566, 1620, 530, 598, 528, 600, 588, 1618, 570, 558, 568, 1622, 528, 596, 554, 1656, 568, 558, 566, 1620, 528, 1682, 570, 7350, 530};

uint16_t heat28c[197] = {
    6148, 7330, 602, 1594, 530, 1670, 574, 1634, 596, 1540, 652, 1592, 598, 1598, 526, 1668, 606, 1604, 596, 534, 594, 532, 594, 532, 596, 532, 596, 532, 594, 534, 594, 532, 594, 532, 594, 1594, 598, 1596, 524, 1672, 610, 1598, 598, 1620, 570, 1594, 528, 1668, 574, 1626, 608, 560, 568, 560, 568, 560, 568, 560, 568, 558, 568, 560, 568, 558, 568, 560, 568, 1592, 598, 1596, 528, 1670, 606, 1604, 596, 1594, 596, 1594, 596, 1598, 526, 1670, 608, 568, 566, 560, 568, 560, 568, 560, 568, 560, 568, 558, 568, 558, 568, 560, 568, 1596, 594, 560, 570, 1594, 528, 628, 500, 626, 502, 628, 500, 628, 500, 1668, 576, 576, 576, 1594, 612, 560, 568, 1598, 594, 1594, 598, 1594, 528, 1670, 574, 578, 578, 1638, 568, 1594, 624, 558, 568, 560, 570, 1596, 526, 1664, 580, 1616, 610, 566, 564, 564, 564, 562, 568, 1594, 598, 1622, 570, 558, 568, 560, 568, 558, 570, 1594, 528, 628, 502, 1668, 574, 576, 580, 1592, 612, 564, 564, 1596, 598, 560, 568, 560, 568, 1592, 600, 558, 568, 1596, 528, 628, 500, 1692, 550, 578, 552, 1642, 592, 1596, 596, 7388, 572};

uint16_t cool22c[197] = {
    6140, 7354, 528, 1680, 612, 1572, 534, 1660, 588, 1618, 570, 1620, 528, 1678, 570, 1618, 532, 1658, 576, 572, 568, 558, 566, 558, 566, 560, 526, 598, 528, 598, 546, 580, 588, 558, 566, 1616, 562, 1632, 548, 1658, 568, 1620, 528, 1680, 570, 1616, 536, 1656, 578, 1630, 566, 558, 568, 556, 530, 598, 526, 600, 586, 560, 566, 558, 566, 556, 568, 558, 532, 1656, 580, 1626, 572, 1618, 530, 1682, 568, 1616, 612, 1580, 548, 1658, 610, 1578, 530, 598, 526, 598, 550, 600, 566, 558, 566, 558, 566, 558, 530, 596, 528, 596, 548, 1660, 558, 568, 566, 1622, 528, 596, 552, 596, 566, 558, 566, 558, 566, 1622, 528, 598, 586, 1620, 570, 558, 566, 1622, 548, 1662, 608, 1576, 530, 1662, 578, 568, 566, 1616, 564, 562, 530, 596, 550, 1660, 558, 1628, 534, 594, 528, 1682, 570, 1616, 564, 564, 528, 1660, 580, 1626, 562, 566, 528, 596, 528, 1682, 564, 562, 566, 558, 566, 558, 528, 1662, 588, 558, 564, 1618, 534, 592, 528, 1680, 568, 558, 566, 558, 568, 1618, 528, 598, 550, 1658, 568, 558, 566, 1620, 528, 598, 588, 1620, 568, 1620, 528, 7442, 568};

OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

// blynk token
char auth[] = "00000000000000000000000000";

char ssid[] = "SSID";
char pass[] = "PASSWORD";
int cool = 0;
int heat = 0;
int turnOff = 0;

BLYNK_WRITE(V0)
{
  if (param.asInt())
    cool = 1;
  else
    cool = 0;
}

BLYNK_WRITE(V1)
{
  if (param.asInt())
    heat = 1;
  else
    heat = 0;
}

BLYNK_WRITE(V3)
{
  if (param.asInt())
    turnOff = 1;
  else
    turnOff = 0;
}

void setup()
{
  Serial.begin(115200, SERIAL_8N1, SERIAL_TX_ONLY);
  sensors.begin();
  irsend.begin();
  Blynk.begin(auth, ssid, pass);
}

void loop()
{
  sensors.requestTemperatures();
  Blynk.run();
  Blynk.virtualWrite(V2, (int)round(sensors.getTempC(sensor1)));

  if (cool)
  {
    irsend.sendRaw(cool22c, 197, 38);
    delay(5000);
  }

  if (heat)
  {
    irsend.sendRaw(heat28c, 197, 38);
    delay(5000);
  }

  if (turnOff)
  {
    irsend.sendRaw(generalOff, 197, 38);
    delay(5000);
  }

  delay(100);
}
